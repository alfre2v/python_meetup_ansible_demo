---
# group vars defined here apply to all hosts in the inventory

postgresql_version: '12'
# admin username for postgresql is `postgres`
postgres_admin_user: postgres
postgres_admin_pass: ""  # overridden in var_secrets.yml or vars_vault.yml

# linux system user for postgres process is `postgres` too
postgres_user: "{{ postgres_admin_user }}"
#postgres_pass: ""  # overridden by var_secrets.yml

app_database_host: "{{ hostvars[groups['db'][0]].ansible_host }}"  # to be substituted in local_settings_vagrant_template.py
app_database_port: 5432

app_database_name: "tutor_site_demo"
app_database_user: "{{ app_database_name }}"
app_database_pass: ""  # overridden by var_secrets.yml


# code will be cloned to /home/{{ deployment_user }}/{{ app_dir_name_remote }}
git_repo_ssh: "git@github.com:alfre2v/python_meetup_ansible_demo.git"
git_repo_https: "https://github.com/alfre2v/python_meetup_ansible_demo.git"
git_repo_branch: main


# linux user who will deploy the app code.
deployment_user: tutorsite

# unique_appname must be unique in a server. Same app can be deployed in 2 different subdomains/vhosts in same server
unique_appname: tutor_site_demo1

# Remote folder name into which the app code will be cloned. For full paths see `remote_app_code_dir`
app_dir_name_remote: "{{ unique_appname }}"

# name of the top django folder (which contains manage.py), and the folder that contains django's `settings.py`.
top_django_dir: tutor_site
# name of folder that contains django's `settings.py`.
app_django_mainapp: tutor_site  # an alias for app_main_djangoapp_dir_name

# app source code locations
remote_code_dir_path: "/home/{{ deployment_user }}/{{ app_dir_name_remote }}"
remote_top_django_dir_path:  "{{ remote_code_dir_path }}/{{ top_django_dir }}"
remote_app_code_settings_dir: "{{ remote_top_django_dir_path }}/{{ app_django_mainapp }}"

# app virtualenv location
remote_app_virtualenv_dir: "{{ remote_code_dir_path }}/.venv"

# dir to clone repo in Ansible host
local_code_dir_path: "/tmp/{{ app_dir_name_remote }}"
local_top_django_dir_path:  "{{ local_code_dir_path }}/{{ top_django_dir }}"
local_app_code_settings_dir: "{{ local_top_django_dir_path }}/{{ app_django_mainapp }}"

# target deployment environment with a unique local_settings template. possible values are 'vagrant' or 'prod'
app_deploy_target: vagrant

app_local_settings_filename: local_settings_{{ app_deploy_target }}.py
app_local_settings_template_filename: local_settings_{{ app_deploy_target }}.py.template

app_local_settings_module: "{{ app_local_settings_filename | split('.') | first }}"  # local_settings_env.py  =>  local_settings_env

deployment_version_file: deployment_version
deployment_version_file_path: "{{ local_top_django_dir_path }}/{{ deployment_version_file }}"


# secret key to provide cryptographic signing for your django app. Should be unique and unpredictable.
app_local_settings_secret_key: ""  # overridden in var_secrets.yml

app_local_settings_allowed_hosts: '{{ ''"'' + (([''.localhost'', ''127.0.0.1''] + app_domain_list_no_prefix) | join(''", "'')) + ''"'' }}'  # minimum string: '".localhost", "127.0.0.1"'

django_debug_on: "True"  # or "False" to disable debug. This substitute DEBUG = False in Django local settings template.

django_development_listen: 0.0.0.0
django_development_port: 8080

# --- App domains primary vars ---

# List of domains nginx will recognize for this app.
# prefix each entry with with one of: email, URI, DNS, RID, IP, dirName, otherName
app_domain_list:
  - "DNS:orc-app1.test"
  - "DNS:www.orc-app1.test"
  - "DNS:docs.orc-app1.test"

# list of app domain names without the SAN prefix (this is usually what you want)
app_domain_list_no_prefix: "{{ app_domain_list | map('split', ':') | map('last') | map('trim') }}"


# for an independent deployment to another subdomain in same machine already deployed you must
# change vars: `unique_appname`, `gunicorn_listen_port`, `app_domain_list` and `urls_available_check`.
# app_domain_list:
#   - "DNS:demos2.orc-app1.test"
#   - "DNS:demos2.orc-app2.test"



# --- Postgresql configuration lines ---

# lines to substitute in file /etc/postgresql/{{ postgresql_version }}/main/postgresql.conf
postgresql_conf_lines:
  - { regexp: '^\s*listen_addresses\s*=', line: 'listen_addresses = ''0.0.0.0''  # ALF: Listen on all IPv4 addresses', insertbefore: '^port\s*=' }

# lines to include in file /etc/postgresql/*/main/pg_hba.conf
# see: https://www.postgresql.org/docs/current/auth-pg-hba-conf.html
pg_hba_conf_lines:
  - { type: local, database: all, user: postgres, address: 'samehost', auth_method: peer }
  - { type: local, database: all, user: all, address: 'samehost', auth_method: peer }
  - { type: host, database: all, user: all, address: '127.0.0.1/32', auth_method: md5 }
  - { type: host, database: all, user: all, address: '::1/128', auth_method: md5 }
  # for vagrant allow ssl connections from the same network (samenet == 192.168.56.1/24)
  - { type: hostssl, database: all, user: all, address: 'samenet', auth_method: md5 }


# --- Import DB data dump ---

should_import_data_dump: no

# app DB data import
sql_dump_filename: tutorsitedemo_dumpfile.sql
local_data_dump_dir: "files"                                                      # relative path from playbook location
remote_data_dump_dir: /home/{{ postgres_user }}/data_dumps                        # do not add / in the end
local_sql_dump_file_path: "{{ local_data_dump_dir }}/{{ sql_dump_filename }}"
remote_sql_dump_file_path: "{{ remote_data_dump_dir }}/{{ sql_dump_filename }}"



# apt packages that must be installed in all machines
apt_install_packages:
  # that lack of the 'acl' package on Ubuntu 20.04 breaks ansible's become_user su plugin.
  # The /var/tmp/ansible-tmp-* stuff lacks the extra ACLS that allow the become_user to read the tmp python files and it break with a permissions error.
  # see: https://www.reddit.com/r/Ubuntu/comments/ge77fa/acl_no_longer_included_by_default_in_ubuntu/
  - acl
  - curl
  - wget
  - postgresql-client-{{ postgresql_version }}





