---

- name: >
    Install Python3 packages for Ubuntu.
    Copy project source, adjust settings.
    Create Python venv.
    Apply django migrations (and collectstatic?)

  hosts: app

  become: yes

  pre_tasks:
    - ansible.builtin.import_tasks: tasks/tasks_conditional_include_secret_vars.yml
    - ansible.builtin.import_tasks: tasks/tasks_apt_upgrade.yml

    - name: install rsync needed for ansible.posix.synchronize module
      ansible.builtin.apt:
        name: rsync
        state: present

    - name: install ubuntu python3 packages and psql
      ansible.builtin.apt:
        name:
          - python3
          - python3-venv
          - python3-dev
          - python3-virtualenv
          - python3-setuptools
          - postgresql-client-{{ postgresql_version }}
          - build-essential
        state: present


  tasks:
    - name: add deployment user belonging to groups www-data, syslog
      # usermod -a -G www-data user1
      ansible.builtin.user:
        name: "{{ deployment_user }}"
        shell: /bin/bash
        groups: www-data,syslog
        append: yes

#    - name: create {{ app_web_root_dir }} folder
#      become: yes
#      become_user: "{{ deployment_user }}"
#      ansible.builtin.file:
#        path: "{{ app_web_root_dir }}"  # /var/www/{{ unique_appname }}
#        state: directory
#      notify: topic restart nginx and gunicorn

    - name: Clone repo's branch to deploy
      become: yes
      become_user: "{{ deployment_user }}"
      ansible.builtin.git:
        repo: "{{ git_repo_https }}"
        dest: "{{ remote_code_dir_path }}"
        single_branch: yes
        version: "{{ git_repo_branch }}"



    - name: create virtualenv and install requirements in remote host
      become: yes
      become_user: "{{ deployment_user }}"
      ansible.builtin.pip:
        requirements: "{{ remote_top_django_dir_path }}/requirements.txt"
        virtualenv: "{{ remote_app_virtualenv_dir }}"
        virtualenv_site_packages: no
        state: present


    - name: run python manage.py makemigrations
      become: yes
      become_user: "{{ deployment_user }}"
      ansible.builtin.command:
        cmd: "{{ remote_app_virtualenv_dir }}/bin/python3 manage.py makemigrations --noinput"
        chdir: "{{ remote_top_django_dir_path }}"  # /home/{{ deployment_user }}/{{ app_dir_name_remote }}/
      register: makemigrations
      changed_when: "'No changes detected' not in makemigrations.stdout"


    - name: run python manage.py migrate
      become: yes
      become_user: "{{ deployment_user }}"
      ansible.builtin.command:
        cmd: "{{ remote_app_virtualenv_dir }}/bin/python3 manage.py migrate --noinput"
        chdir: "{{ remote_top_django_dir_path }}"  # /home/{{ deployment_user }}/{{ app_dir_name_remote }}/{{ top_django_dir }}
      register: migrate
      changed_when: "'No migrations to apply' not in migrate.stdout"
      # If run in parallel: UniqueViolation: duplicate key value violates unique constraint.
      # Solution: only run migrations in first server of app group. Alternatively use: `run_once: true`)
      when: inventory_hostname == groups['app'][0]


