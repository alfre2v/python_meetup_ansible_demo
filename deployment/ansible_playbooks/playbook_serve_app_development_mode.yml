---

- name: >
    Install Python3 packages for Ubuntu.
    Copy project source, adjust settings.
    Create Python venv.
    Apply django migrations (and collectstatic?)

  hosts: app
  become: yes

  pre_tasks:
    - ansible.builtin.import_tasks: tasks/tasks_conditional_include_secret_vars.yml
    - ansible.builtin.import_tasks: tasks/tasks_apt_upgrade.yml

    - name: 'install apt packages that must be installed in all machines (declared in var: apt_install_packages)'
      ansible.builtin.apt:
        name: "{{ apt_install_packages }}"
        state: present
      when: (apt_install_packages is defined) and (apt_install_packages | length > 0)

    - name: install rsync needed for ansible.posix.synchronize module
      ansible.builtin.apt:
        name: rsync
        state: present

    - name: install ubuntu python3 packages and psql
      ansible.builtin.apt:
        name:
          - python3
          - python3-venv
          - python3-dev
          - python3-virtualenv
          - python3-setuptools
          - postgresql-client-{{ postgresql_version }}
          - build-essential
        state: present

  tasks:
    - name: add deployment user belonging to groups www-data, syslog
      # usermod -a -G www-data user1
      ansible.builtin.user:
        name: "{{ deployment_user }}"
        shell: /bin/bash
        groups: www-data,syslog
        append: yes

    - name: clone repo's branch locally to perform template substitution later
      become: no
      ansible.builtin.git:
        repo: "{{ git_repo_https }}"
        dest: "{{ local_code_dir_path }}"
        single_branch: yes
        version: "{{ git_repo_branch }}"
        force: true
      run_once: yes
      delegate_to: 127.0.0.1

#    # alternative to copy project via rsync, but harder to make idempotent
#    - name: clone repo's branch to deploy on remote node
#      become: yes
#      become_user: "{{ deployment_user }}"
#      ansible.builtin.git:
#        repo: "{{ git_repo_https }}"
#        dest: "{{ remote_code_dir_path }}"
#        single_branch: yes
#        version: "{{ git_repo_branch }}"
#        force: true

    - name: read deployment version local
      become: no
      ansible.builtin.shell:
        cmd: >
          cat {{ deployment_version_file_path_local }} | sed -n -r -e 's/(^[0-9]+$)/\1/p'
      register: deploy_version_local
      run_once: true
      delegate_to: 127.0.0.1
      changed_when: False
    - debug:
        var: deploy_version_local

    - ansible.builtin.stat:
        path: "{{ deployment_version_file_path_remote }}"
      register: _version_file_remote
    - debug:
        var: _version_file_remote

    - name: read deployment version remote
      become: yes
      become_user: "{{ deployment_user }}"
      ansible.builtin.shell:
        cmd: >
          cat {{ deployment_version_file_path_remote }} | sed -n -r -e 's/(^[0-9]+$)/\1/p'
      register: deploy_version_remote
      when: _version_file_remote.stat.exists
      changed_when: False
    - debug:
        var: deploy_version_remote

    - name: Copy project folder using rsync (fast)
      become: yes
      become_user: "{{ deployment_user }}"
      ansible.posix.synchronize:
        mode: push
        src: "{{ local_code_dir_path }}/"   # Must have trailing / . Content of local folder will be copied to newly created remote folder.
        dest: "{{ remote_code_dir_path }}"
      when: not _version_file_remote.stat.exists or (deploy_version_local.stdout | int > deploy_version_remote.stdout | int)

    - name: copy django local settings from template and perform substitutions
      become: yes
      become_user: "{{ deployment_user }}"
      ansible.builtin.template:
        src: "{{ local_app_code_settings_dir }}/{{ app_local_settings_template_filename }}"
        dest: "{{ remote_app_code_settings_dir }}/{{ app_local_settings_filename }}"
        force: true

    - name: modify remote settings.py to import local_settings_{{app_deploy_target}}.py
      become: yes
      become_user: "{{ deployment_user }}"
      ansible.builtin.replace:
        # change `from .local_settings import *` into `from .local_settings_vagrant import *`
        path: "{{ remote_app_code_settings_dir }}/settings.py"
        regexp: '^(?P<from>\s*from)\s+(?P<module>\.local_settings)\s+(?P<import_star>import\s+\*)(?P<comment>\s*#[^\n]*)?$'
        replace: '\g<from> .{{ app_local_settings_module }} \g<import_star>  # ansible: modified for deployment'

    - name: create virtualenv and install requirements in remote host
      become: yes
      become_user: "{{ deployment_user }}"
      ansible.builtin.pip:
        requirements: "{{ remote_top_django_dir_path }}/requirements.txt"
        virtualenv: "{{ remote_app_virtualenv_dir }}"
        virtualenv_site_packages: no
        state: present

    - name: run python manage.py makemigrations
      become: yes
      become_user: "{{ deployment_user }}"
      ansible.builtin.command:
        cmd: "{{ remote_app_virtualenv_dir }}/bin/python3 manage.py makemigrations --noinput"
        chdir: "{{ remote_top_django_dir_path }}"  # /home/{{ deployment_user }}/{{ app_dir_name_remote }}/
      register: makemigrations
      changed_when: "'No changes detected' not in makemigrations.stdout"

    - name: run python manage.py migrate
      become: yes
      become_user: "{{ deployment_user }}"
      ansible.builtin.command:
        cmd: "{{ remote_app_virtualenv_dir }}/bin/python3 manage.py migrate --noinput"
        chdir: "{{ remote_top_django_dir_path }}"  # /home/{{ deployment_user }}/{{ app_dir_name_remote }}/{{ top_django_dir }}
      register: migrate
      changed_when: "'No migrations to apply' not in migrate.stdout"
      # If run in parallel: UniqueViolation: duplicate key value violates unique constraint.
      # Solution: only run migrations in first server of app group. Alternatively use: `run_once: true`)
      when: inventory_hostname == groups['app'][0]

    - name: Hack - create a quick shell script to execute our application in django development server (insecure!)
      become: yes
      become_user: "{{ deployment_user }}"
      ansible.builtin.copy:
        dest: "{{ remote_top_django_dir_path }}/start_app.sh"
        content: |
          #!/bin/bash
          
          # quick and dirty way to start our app as a service. Not suitable for production!
          pid=$(cat {{ remote_top_django_dir_path }}/pid.nohup)
          ps_grep=""
          if [ -n "$pid" ]; then 
            ps_grep=$(ps -aux | egrep "\s$pid\s")
          fi
          if [ -z "$ps_grep" ]; then
            nohup {{ remote_app_virtualenv_dir }}/bin/python3 manage.py runserver --insecure {{ django_development_listen }}:{{ django_development_port }} &
            echo $! > {{ remote_top_django_dir_path }}/pid.nohup
            echo "App started"
          fi
        mode: '0755'

    - name: stop the app if running only when code has changed
      ansible.builtin.shell:
        cmd: kill `cat {{ remote_top_django_dir_path }}/pid.nohup`
      when: not _version_file_remote.stat.exists or (deploy_version_local.stdout | int > deploy_version_remote.stdout | int)
      failed_when: False

    - name: Serve our app via django development server
      ansible.builtin.command:
        cmd: "./start_app.sh"
        chdir: "{{ remote_top_django_dir_path }}"
      register: _start_app
      changed_when: "'App started' in _start_app.stdout"
